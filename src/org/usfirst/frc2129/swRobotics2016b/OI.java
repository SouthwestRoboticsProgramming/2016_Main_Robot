// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2129.swRobotics2016b;

import org.usfirst.frc2129.swRobotics2016b.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    
    
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton intakeUp;
    public JoystickButton intakeDown;
    public JoystickButton intakeIn;
    public JoystickButton intakeOut;
    public Joystick leftJoystick;
    public JoystickButton shooterFire;
    public JoystickButton shooterAutoAim;
    public Joystick rightJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    	System.out.println("swRobotics2016b swRobotics2016b swRobotics2016b swRobotics2016b swRobotics2016b swRobotics2016b swRobotics2016b swRobotics2016b");
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightJoystick = new Joystick(1);
        
        shooterAutoAim = new JoystickButton(rightJoystick, 2);
        shooterAutoAim.whileHeld(new commandGroup_launchBall());
        shooterFire = new JoystickButton(rightJoystick, 1);
        shooterFire.whenPressed(new commandGroup_launchBall());
        leftJoystick = new Joystick(0);
        
        intakeOut = new JoystickButton(leftJoystick, 5);
        intakeOut.whileHeld(new IntakeRoller_SpinForOutput());
        intakeIn = new JoystickButton(leftJoystick, 4);
        intakeIn.whileHeld(new intakeRoller_spinForIntake());
        intakeDown = new JoystickButton(leftJoystick, 3);
        intakeDown.whileHeld(new ElevatorDown());
        intakeUp = new JoystickButton(leftJoystick, 2);
        intakeUp.whileHeld(new ElevatorUp());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("shooterSpinner_spinWheelsForLaunch", new shooterSpinner_spinWheelsForLaunch());
        SmartDashboard.putData("shooterSpinner_spinWheelsForIntake", new shooterSpinner_spinWheelsForIntake());
        SmartDashboard.putData("shooterSpinner_stopShooterWheels", new shooterSpinner_stopShooterWheels());
        SmartDashboard.putData("shooterPusher_moveBallPusherToLaunch", new shooterPusher_moveBallPusherToLaunch());
        SmartDashboard.putData("shooterPusher_moveBallPusherForIntake", new shooterPusher_moveBallPusherForIntake());
        SmartDashboard.putData("commandGroup_pickUpBall", new commandGroup_pickUpBall());
        SmartDashboard.putData("commandGroup_launchBall", new commandGroup_launchBall());
        SmartDashboard.putData("intakeRoller_spinStop", new intakeRoller_spinStop());
        SmartDashboard.putData("IntakeRoller_SpinForOutput", new IntakeRoller_SpinForOutput());
        SmartDashboard.putData("ElevatorUp", new ElevatorUp());
        SmartDashboard.putData("ElevatorDown", new ElevatorDown());
        SmartDashboard.putData("ElevatorStop", new ElevatorStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
        // Display status of Scheduler in SmartDashboard. This displays
        // all the commands and "Cancel" buttons for each command. 
        // ==========================================================
        SmartDashboard.putData(Scheduler.getInstance());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getleftJoystick() {
        return leftJoystick;
    }

    public Joystick getrightJoystick() {
        return rightJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

