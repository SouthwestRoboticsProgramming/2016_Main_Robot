// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2129.swRobotics2016b.subsystems;

import org.usfirst.frc2129.swRobotics2016b.RobotMap;
import org.usfirst.frc2129.swRobotics2016b.commands.CommandTilterStop;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class SubsystemTilter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motorTilter = RobotMap.subsystemTilterMotorTilter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public Encoder encoder;
    public PIDController pid_controller;

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new CommandTilterStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        
        encoder = new Encoder(8, 9, false, EncodingType.k4X);
        pid_controller = new PIDController(0.2, 0.6, 0.05, encoder, motorTilter);
        pid_controller.setPercentTolerance(2.5f);
    }
    
    public void pidStart(){
    	pid_controller.enable();
    }
    
    public void pidStop(){
    	pid_controller.disable();
    }
    
    public void pidSet(double pos){
    	pid_controller.setSetpoint(pos);
    }
    
    public void TilterStop() {
    	motorTilter.set(0.0);
    }
    
    public void TilterUp() {
    	motorTilter.set(0.25);
    }
    
    public void TilterDown() {
    	motorTilter.set(-0.25);
    }
}

