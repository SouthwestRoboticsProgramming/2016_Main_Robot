// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2129.swRobotics2016b.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2129.swRobotics2016b.Robot;

/**
 *
 */
public class shooterSpinner_spinWheelsForLaunch extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public shooterSpinner_spinWheelsForLaunch() {
    	timer = new Timer();
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter_Spinners);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	hasStarted = false;
    	isInterrupted = false;
    	shooterSpinUpDelaySeconds = Robot.preferences.getLong("ShooterSpinUpDelaySeconds", 2);
    }

    private Timer timer;	// Timer allows wheels to spin up before command exits
    private boolean hasStarted;
    private boolean isInterrupted;
	private long shooterSpinUpDelaySeconds;
	
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.shooter_Spinners.spinForShooting(); 
    	
    	if (!hasStarted)
		 {
			 timer.start();
			 hasStarted = true;
		 }
    	 
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (isInterrupted)
    	{
    		return true;
    	}
    	
    	if (hasStarted && timer.get() >= shooterSpinUpDelaySeconds)
    	{
    		return true;
    	}
    	else
    	{
    		return false;	
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	timer.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	isInterrupted = true;
    }
}
